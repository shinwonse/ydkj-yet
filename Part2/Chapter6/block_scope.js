{
  // 아직 스코프가 필요하지 않습니다.

  // 이제 블록이 스코프여야 한다는 것을 인지했습니다.
  let thisIsNowAScope = true;

  for (let i = 0; i < 5; i++) {
    // 여기도 스코프인데
    // 이터레이션마다 각각 활성화됩니다.
    if (i % 2 === 0) {
      // 여기는 스코프가 아닌 블록일 뿐입니다.
      console.log(i);
    }
  }
}

/**
 * 모든 중괄호 쌍이 항상 블록 스코프를 생성하는 건 아닙니다(스코프가 될 자격은 있습니다).
 *
 * 예시 코드처럼 가장 바깥쪽에 중괄호 쌍을 생성할 수 있습니다.
 * 다만 이렇게 명시적으로 블록을 만드는 게 의미적인 신호가 될 순 있지만 블록 내부에
 * 선언이 없다면 중괄호 쌍은 스코프를 만들지 않고 실행 동작에도 영향을 끼치지 않습니다.
 *
 * 블록 스코프를 지원하는 대부분의 프로그래밍 언어에서 명시적으로 블록 스코프를 만드는 건
 * 변수의 범위를 좁히는 일반적인 패턴입니다.
 */

if (somethingHappened) {
  // 이것은 블록이지만, 스코프는 아닙니다.

  {
    // 이것은 블록이면서 명시적 스코프입니다.
    let msg = somethingHappened.message();
    notifyOthers(msg);
  }

  recoverFromSomething();
}

/**
 * if 문 내부의 중괄호는 작은 명시적인 내부 스코프를 나타내며, msg 변수는 전체 if 블록에서 필요하지 않기 때문에
 * 해당 블록 스코프로 제한했습니다. 많은 개발자들은 msg를 if 블록에 선언하곤 하는데,
 * 코드가 짧을 경우에는 어디에 변수를 선언하는지가 그리 중요하지 않을 수 있습니다.
 * 그러나 코드가 길어지면 과도한 노출 문제가 더욱 부각됩니다.
 */
